package soap;

import javax.xml.soap.*;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Service;
import javax.xml.ws.soap.SOAPFaultException;
import javax.xml.namespace.QName;

import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public class NDFD_SOAP
{
	public static void main(String[] args)
	{
		
		//Put all valid zip codes stored in txt file into arraylist
		ArrayList<String> Zips = new ArrayList();
		Zips = getZips();
		
		weatherRequest[] threadArray = new weatherRequest[50];
		for(int x = 0; x < threadArray.length; x++)
		{
			threadArray[x] = new weatherRequest(Integer.toString(x), Zips);
			threadArray[x].start();
			try {
				TimeUnit.MILLISECONDS.sleep(50);
			} catch (InterruptedException e) {
				// Catch the interrupt
				e.printStackTrace();
			}
		}
	}
	
	public static ArrayList getZips()
	{
		String zipCodeFile = "Zipcodes.txt";
		String line = null;
		ArrayList<String> allZips = new ArrayList();
		
		try {
			// Create Filereader
			FileReader getZips = new FileReader(zipCodeFile);
			
			BufferedReader getZipsBufferedReader = new BufferedReader(getZips);
			
			//Read Each line and append any zip codes with 0's if it is less than length 5
			while((line = getZipsBufferedReader.readLine()) != null)
			{
				if(line.length() == 3)
				{
					line = "00" + line;
				}
				else if(line.length() == 4)
				{
					line = "0" + line;
				}
				allZips.add(line);
			}
			
			//close file
			getZipsBufferedReader.close();
		}
		
		catch(FileNotFoundException ex)
		{
			System.out.println("Unable to open file '" + zipCodeFile + "'");
		}
		
		catch(IOException ex)
		{
			System.out.println("Error reading file '" + zipCodeFile + "'");
			ex.printStackTrace();
		}
		
		return allZips;
	}
}


class weatherRequest implements Runnable
{
	static boolean zipsSet = false;
	static int zipIndex = 0;
	static ArrayList<String> Zips = new ArrayList();
	static ArrayList<String[]> coordinates = new ArrayList();
	private Thread t;
	private String threadName;
	static boolean printStuff = false;
	
	public weatherRequest(String name, ArrayList<String> Zipsx)
	{
		threadName = name;
		System.out.println("Creating " + threadName);
		if(zipsSet == false)
		{
			zipsSet = false;
			Zips = Zipsx;
		}
	}
	
	public void run()
	{
		// For each zip code stored then get the NDFD sml data a print to file
		while(zipIndex < Zips.size())
		{
			String fetchZip = Zips.get(zipIndex);
			zipIndex++;
			SOAPRequest(fetchZip);
		}
		if(printStuff == false)
		{
			printStuff = true;
			try {
				TimeUnit.MILLISECONDS.sleep(500);
			} catch (InterruptedException e) {
				// Catch the interrupt
				e.printStackTrace();
			}
			try {
				PrintStream fileStream = new PrintStream(new File("C:\\Users\\Cody\\workspace\\soap\\NewZipFile.txt"));
				
				for(int x = 0; x < coordinates.size(); x++)
				{
					String[] temp = new String[2];
					temp = coordinates.get(x);
					fileStream.println(temp[0] + " " + temp[1]);
				}
				fileStream.close();
			}
			catch(IOException ex)
			{
				ex.printStackTrace();
			}
		}
		
		
	}
	
	public void start()
	{
		System.out.println("Starting " + threadName);
		if(t == null)
		{
			t = new Thread (this, threadName);
			t.start();
		}
	}
	
	public void SOAPRequest(String zipToGet)
	{
		try {
			String nsSchema = "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd";
            String soapSchema = "http://schemas.xmlsoap.org/soap/envelope/";
            String xsiSchema = "http://www.w3.org/2001/XMLSchema-instance";
            String encodingStyle  = "http://schemas.xmlsoap.org/soap/encoding/"; 
            String zipRequest = "<S:Envelope " 
                    + " xmlns:S=\"" + soapSchema + "\" "
                    + " xmlns:xsi=\"" + xsiSchema + "\" "
                    + " xmlns:schNS=\"" + nsSchema + "\"> "                
                    + "<S:Body>"
                    +"   <LatLonListZipCode S:encodingStyle=\"" 
                    +           encodingStyle + "\">" 
                    +           "<schNS:zipCodeList xsi:type=\"schNS:zipCodeListType\">" 
                    +               zipToGet
                    +           "</schNS:zipCodeList>"
                    +    "</LatLonListZipCode>"
                    +"</S:Body>"
                    +"</S:Envelope>";
                               
            String wsdl = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php?wsdl";
            String targetNS = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl";

            URL url = new URL(wsdl);
            QName serviceName = new QName(targetNS, "ndfdXML");
            QName portName = new QName(targetNS, "ndfdXMLPort");
            Service service = Service.create(url, serviceName);

            /*
             * (used here) -- SAAJ SOAPMessages (used in 2nd request below)
             */
            Dispatch<Source> dispatch = service.createDispatch(portName, Source.class, Service.Mode.MESSAGE);
            Source zipResponse = dispatch.invoke(new StreamSource(new StringReader(zipRequest)));
            
            // use SAAJ to open message -- check if error or valid data
            MessageFactory msgFactory = MessageFactory.newInstance();
            SOAPMessage geocodeMsg = msgFactory.createMessage();            
            SOAPPart env = geocodeMsg.getSOAPPart();
            env.setContent(zipResponse);
            // writeTo method outputs SOAPMessage, helpful for debugging
            // geocodeMsg.writeTo(System.out);
            
            if (geocodeMsg.getSOAPBody().hasFault()) 
            {
                // Copy official error response into our LNF Fault
                SOAPFault fault = geocodeMsg.getSOAPBody().getFault();
                System.out.println("Could not obtain forecast for zipcode " + zipToGet + ": " + fault.getFaultString() + "; " + fault.getDetail().getValue());
            } 
            
            // From here: valid geocode is present-- so get weather report next
            
            /*
             * LatLonListZipCodeResponse is not very helpful; needed information
             * (latLonList) element is html-escaped instead of a real tag, which
             * is suitable for HTML responses but not so helpful when you need
             * to extract the value. So will need to parse string response to
             * get geocode values <SOAP-ENV:Envelope> <SOAP-ENV:Body>
             * <ns1:LatLonListZipCodeResponse> <listLatLonOut
             * xsi:type="xsd:string"> <?xml version='1.0' ?> <dwml
             * version='1.0' > <latLonList> 35.1056,-90.007
             * </latLonList> </dwml> </listLatLonOut>
             * </ns1:LatLonListZipCodeResponse> </SOAP-ENV:Body>
             * </SOAP-ENV:Envelope>
             */
            String geocodeBuffer = geocodeMsg.getSOAPBody().
                getElementsByTagName("listLatLonOut").item(0).getFirstChild().getNodeValue();
            
            // .getNodeValue() unescapes HTML string
            String geocodeVals = geocodeBuffer.substring(
                geocodeBuffer.indexOf("<latLonList>") + 12,
                geocodeBuffer.indexOf("</latLonList>"));
            System.out.println("Geocode Vals for zip code " + zipToGet + " are: " + geocodeVals);
            String[] temp = new String[2];
            temp[0] = zipToGet;
            temp[1] = geocodeVals;
            coordinates.add(temp);
            /*
             * NDFDgenLatLonList operation: gets weather data for a given
             * latitude, longitude pair
             * 
             * Format of the Message: 
             * <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
					<SOAP-ENV:Body>
						<ns8077:LatLonListZipCode xmlns:ns8077="uri:DWMLgen">
							<listZipCodeList xsi:type="xsd:string">25414</listZipCodeList>
						</ns8077:LatLonListZipCode>
					</SOAP-ENV:Body>
				</SOAP-ENV:Envelope>
            */
            /*
            SOAPFactory soapFactory = SOAPFactory.newInstance();
            SOAPMessage getWeatherMsg = msgFactory.createMessage();
            SOAPHeader header = getWeatherMsg.getSOAPHeader();
            header.detachNode();  // no header needed
            SOAPBody body = getWeatherMsg.getSOAPBody();
            Name functionCall = soapFactory.createName("NDFDgenLatLonList", "schNS", nsSchema);
            SOAPBodyElement fcElement = body.addBodyElement(functionCall);
            Name attname = soapFactory.createName("encodingStyle", "S", soapSchema);
            fcElement.addAttribute(attname, soapSchema);
            SOAPElement geocodeElement = fcElement.addChildElement("listLatLon");
            geocodeElement.addTextNode(geocodeVals);
            SOAPElement product = fcElement.addChildElement("product");
            product.addTextNode("time-series");
            
            // make web service call using this SOAPMessage
            Dispatch<SOAPMessage> smDispatch = null;
            smDispatch = service.createDispatch(portName, SOAPMessage.class, Service.Mode.MESSAGE);
            SOAPMessage weatherMsg = smDispatch.invoke(getWeatherMsg);
            // weatherMsg.writeTo(System.out); // debugging only
            
            // Metro needs normalize() command because it breaks
            // up child dwml element into numerous text nodes.
            weatherMsg.getSOAPBody().getElementsByTagName("dwmlOut").item(0).normalize();
            
            // First child of dwmlOut is the dwml element that we need.
            // It is the root node of the weather data that we will
            // be using to generate the report.
            String weatherResponse = weatherMsg.getSOAPBody().getElementsByTagName("dwmlOut").item(0).getFirstChild().getNodeValue();
            System.out.println("WR: " + weatherResponse);
            writeXMLFile(weatherResponse, zipToGet); */
        	} catch (SOAPFaultException e) {
        		System.out.println("SOAPFaultException: " + e.getFault().getFaultString());
        		Zips.add(zipToGet);
        	} catch (Exception e) {
        	  System.out.println("Exception: " + e.getMessage());
        	  Zips.add(zipToGet);
        }
	}
	
	public void writeXMLFile(String response, String zip)
	{
		try {
			FileWriter writer = new FileWriter("C:\\Users\\Cody\\workspace\\soap\\NDFDFiles\\" + zip + ".xml");
			
			writer.write(response);
			
			writer.close();
		}
		catch(IOException ex)
		{
			System.out.println("Error writing file '" + zip + ".xml" + "'");
			ex.printStackTrace();
		}
	}
	

}
